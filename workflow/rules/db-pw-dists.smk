"""
Rules for generating pairwise distance matrix for GAMBIT database reference genomes.

If done in a single step the resulting distance matrix would be huge (and also highly redundant
due to symmetry). Instead we split the reference genomes into a number of chunks based on taxonomy
and calculate a separate distance matrix for each unique unordered pair. This is annoying to work
with though, so helper code is defined in the `gambit_pub.db_pw_dists` module.
"""


# Divide reference genomes into chunks based on taxonomy
checkpoint db_pw_dists_make_chunks:
	input:
		db_signatures=rules.fetch_gambit_db.output['signatures'],
		db_genomes=rules.fetch_gambit_db.output['genomes'],
	params:
		max_chunk_size=2500,
		taxon_genomes_cap=config['test_mode']['db_taxon_genomes_cap'] if TEST else None,
	output:
		summary_table='intermediate-data/db-pw-dists/chunks.csv',
		taxa_table='intermediate-data/db-pw-dists/chunk-taxa.csv',
		chunks_dir=directory('intermediate-data/db-pw-dists/chunks/'),
	script: '../scripts/db-pw-dists-make-chunks.py'


# Create pairwise distance matrix for two genome chunks
rule db_pw_dists_chunk:
	input:
		signatures=rules.fetch_gambit_db.output['signatures'],
		chunks_dir=rules.db_pw_dists_make_chunks.output['chunks_dir'],
	output: 'intermediate-data/db-pw-dists/dists/{chunk1}-{chunk2}.h5'
	wildcard_constraints:
		chunk1='\d+',
		chunk2='\d+',
	params:
		show_progress=config['show_progress'],  # Display progress bar
	threads: workflow.cores
	script: '../scripts/db-pw-dists-chunk.py'


@cache
def get_db_pw_dists_num_chunks():
	"""Get the number of chunks generated by the db_pw_dists_make_chunks checkpoint/rule."""
	cp = checkpoints.db_pw_dists_make_chunks.get()
	df = pd.read_csv(cp.output['summary_table'])
	return df.shape[0]


def get_db_pw_dists_chunk_inputs(wildcards=None):
	cp = checkpoints.db_pw_dists_make_chunks.get()
	return dict(chunk_taxa=cp.output['taxa_table'], chunk_genomes_dir=cp.output['chunks_dir'])


# @cache
# def get_db_pw_dists_genome_chunks(wildcards=None):
# 	"""Get GenomeChunks object representing division of database genomes into chunks."""
# 	from gambit_pub.db_pw_dists import GenomeChunks
#
# 	cp = checkpoints.db_pw_dists_make_chunks.get()
# 	return GenomeChunks.load(
# 		cp.output['taxa_table'],
# 		cp.output['chunks_dir'],
# 	)

@cache
def get_db_pw_dists_dmat_files_dict():
	"""Get mapping from all chunk pairs to the corresponding output of db_pw_dists_chunk."""
	n = get_db_pw_dists_num_chunks()
	return {
		(c1, c2): expand(rules.db_pw_dists_chunk.output, chunk1=c1, chunk2=c2)[0]
		for c1 in range(n) for c2 in range(c1, n)
	}

def get_db_pw_dists_dmat_files(wildcards=None):
	"""Get output files of db_pw_dists_chunk rule for all chunk pairs."""
	return list(get_db_pw_dists_dmat_files_dict().values())


# Minimum and maximum distances between leaf taxa
rule db_pw_dist_ranges:
	input:
		unpack(get_db_pw_dists_chunk_inputs),
		db_genomes=rules.get_gambit_db.output['genomes'],
		dmat_chunks=get_db_pw_dists_dmat_files,
	# params:
		# genome_chunks=get_db_pw_dists_genome_chunks,
		# dmat_chunks=get_db_pw_dists_dmat_files_dict(),
	output:
		min_dists='results/db-pw-dists/leaf-min-dists.csv',
		max_dists='results/db-pw-dists/leaf-max-dists.csv',
	script: '../scripts/db-taxa-pw-dist-ranges.py'
