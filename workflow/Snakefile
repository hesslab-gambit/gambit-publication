from pathlib import Path
import os
import sys
from functools import lru_cache as cache
import pandas as pd
import numpy as np
from snakemake.utils import min_version
from gambit.util.io import read_lines, write_lines

min_version("7.0")

wildcard_constraints:
	genomeset="set[12345]",
	k="\d+",
	prefix="[ACGT]+",

# Path to this repo's base directory, regardless of the work directory we're running Snakemake in
SRC_DIR = os.path.realpath(os.path.dirname(workflow.basedir))


### Test mode ###

# Note - can't set config value to a bool from the command line, just check for truthiness
TEST = bool(config.get('test', False))

if TEST:
	print("Test mode enabled!", file=sys.stderr)


### Configuration ###

configfile: f'{SRC_DIR}/config/config.yaml'
configfile: f'{SRC_DIR}/config/benchmarks.yaml'

if TEST:
	configfile: f'{SRC_DIR}/config/config-test.yaml'

# Directory source data is downloaded to
DL_RESOURCES = f'{SRC_DIR}/resources' if config['dl_to_src_dir'] else 'resources'

# Environment
os.environ.update(
	GAMBIT_DB_PATH=f'{SRC_DIR}/resources/gambit-db',
	MPLCONFIGDIR=f'{SRC_DIR}/config/matplotlib',
	MATPLOTLIBRC=f'{SRC_DIR}/config/matplotlib/matplotlibrc',
)

# Main GAMBIT parameters
K = config['gambit']['k']
PREFIX = config['gambit']['prefix']

ALL_GENOME_SETS = ['set1', 'set2', 'set3', 'set4', 'set5']
# Main genome sets compared in figures 1 and 2
COMPARISON_GENOME_SETS = ['set1', 'set2', 'set3', 'set4']


### Rules ###

include: "rules/src-data.smk"
include: "rules/fastani.smk"
include: "rules/gambit.smk"
include: "rules/figures.smk"
include: "rules/supplemental.smk"
include: "rules/benchmark.smk"
include: "rules/extra.smk"

if TEST:
	include: "rules/test.smk"


# Create primary figures and tables.
rule main:
	input:
		*rules.figure_1.output,
		*rules.figure_2.output,
		*rules.figure_3.output,
		*rules.figure_4.output,
		*rules.figure_5.output,
		*rules.figure_6.output,
	default_target: True


# Create supplemental figures and tables.
rule supplemental:
	input:
		*rules.supplemental_figure_1.output


# Starts IPython shell with access to global scope of workflow. For testing/development.
rule debug:
	run:
		import IPython
		IPython.embed()
